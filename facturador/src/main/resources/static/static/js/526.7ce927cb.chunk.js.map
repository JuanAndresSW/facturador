{"version":3,"file":"static/js/526.7ce927cb.chunk.js","mappings":"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","sources":["pages/SignUp/adapters/accountToJson.ts","pages/SignUp/services/postAccount.ts","pages/SignUp/SignUp.tsx","utilities/Valid.ts","utilities/conversions.ts"],"sourcesContent":["import account from '../models/account';\nimport {fileToBase64, toFormattedCUIT} from 'utilities/conversions';\n\n/**Modifica el objeto de cuenta, dándole el formato esperado por el servidor para crearla. */\nexport default async function accountToJson(account: account): Promise<string> {\n    return JSON.stringify({\n        user: {\n          username:     account.user.username.trim(),\n          email:        account.user.email.trim(),\n          password:     account.user.password.trim(),\n          avatar:       \"\" + await fileToBase64(account.user.avatar),\n        },\n        trader: {\n          businessName: account.trader.businessName.trim(),\n          vatCategory:  account.trader.VATCategory.trim(),\n          cuit:         toFormattedCUIT(account.trader.CUIT),\n        }\n    });\n}","import account from '../models/account';\nimport accountToJson from '../adapters/accountToJson';\nimport ajax from 'ports/ajax';\nimport setSession from 'services/setSession';\nimport Response from 'models/Response';\n\nconst url = \"auth/accounts\";\nconst method = \"POST\";\n\n/**Intenta enviar un nuevo usuario al servidor para registrarlo. */\nexport default async function postAccount(account: account): Promise<Response> {\n    const response = await ajax(method, url, true, await accountToJson(account));\n\n    if (response.status === 201) {\n        \n        setSession(JSON.stringify({\n            accessToken:    JSON.parse(response.content).accessToken,\n            refreshToken:   JSON.parse(response.content).refreshToken,\n            username:       account.user.username,\n            actives:        '0',\n            passives:       '0'\n        }));\n\n        window.location.reload();\n    }\n\n    return response\n} \n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n//Componentes de formulario.\nimport { Button, Field, Form, Image, Message, Radio } from 'components/formComponents';\nimport { Loading } from \"components/standalone\";\nimport { FlexDiv } from \"components/wrappers\";\nimport { BiChevronLeft, BiHome } from \"react-icons/bi\";\n\n//Relacionado a la cuenta.\nimport Valid from \"utilities/Valid\";\nimport account from './models/account';\nimport postAccount from \"./services/postAccount\";\n\n\n/**Un formulario de 2 partes para crear una nueva cuenta de usuario.*/\nexport default function SignUp(): JSX.Element {\n  \n\n  //Controladores del estado del formulario.\n  const [active, setActive]: \n  [(\"user\"|\"trader\"), React.Dispatch<React.SetStateAction<(\"user\"|\"trader\")>>] = useState(\"user\");\n  const [sending, setSending] = useState(false);\n  const [success, setSuccess] = useState(false);\n\n  /*DATOS DEL FORMULARIO*****************************************************/\n\n  //Datos del usuario.\n  const [username, setUsername]           = useState(\"\");\n  const [email, setEmail]                 = useState(\"\");\n  const [password, setPassword]           = useState(\"\");\n  const [avatar, setAvatar]               = useState();\n  const [passwordMatch, setPasswordMatch] = useState(\"\");\n  const [userError, setUserError]         = useState(\"\");\n\n  //Datos del comerciante.\n  const [businessName, setBusinessName]   = useState(\"\");\n  const [VATCategory, setVATCategory]     = useState(\"\");\n  const [CUIT, setCUIT]                   = useState(\"\");\n  const [traderError, setTraderError]     = useState(\"\");\n\n\n  /*VALIDACIÓN***************************************************************/\n\n  function userIsValid(): boolean {\n    setUserError(\"\");\n\n    if (!Valid.names(username, setUserError))     return false;\n    if (!Valid.email(email, setUserError))        return false; \n    if (!Valid.password(password, setUserError))  return false;\n    if (password !== passwordMatch) {setUserError(\"Las contraseñas no coinciden\"); return false}\n    if (!Valid.image(avatar, setUserError))       return false;\n\n    return true;\n  };\n\n  function traderIsValid(): boolean {\n    setTraderError(\"\");\n    if (!Valid.names(businessName)) {setTraderError(\"La razón social debe ser de entre 3 y 20 caracteres\"); return false}\n    if (!Valid.vatCategory(VATCategory, setTraderError)) return false;\n    if (!Valid.CUIT(CUIT, setTraderError)) return false;\n    return true;\n  };\n\n  /*ENVIAR Y RECIBIR*************************************************/\n\n  /**Envía al servidor los datos recolectados. */\n  async function submit(): Promise<void> {\n\n    const account: account = {\n      user: {\n        username: username,\n        email: email,\n        password: password,\n        avatar: avatar,\n      },\n      trader: {\n        businessName: businessName,\n        VATCategory: VATCategory,\n        CUIT: CUIT\n      }\n    }\n    setSending(true);\n    \n    const response = await postAccount(account);\n      \n    setSending(false);\n    if (!response.ok) return setTraderError(response.message);\n    \n    setSuccess(true);\n    setTraderError(\"\");\n    window.location.reload();\n  }\n\n  /*FORMULARIO*****************************************************/\n\n  return (\n    active === \"user\" ?\n    \n    <Form title=\"Datos de la cuenta\" onSubmit={()=>{if (userIsValid()) setActive(\"trader\")}}>\n      <Link to=\"/\"><BiHome /></Link>\n          \n      \n      <Field label=\"¿Cómo quieres que te identifiquemos?\" \n      bind={[username, setUsername]} validator={Valid.names(username)} />\n      <Field label=\"Tu dirección de correo electrónico\"\n      bind={[email, setEmail]} validator={Valid.email(email)} />\n\n      <FlexDiv>\n        <Field label=\"Elige una contraseña\" \n        bind={[password, setPassword]} type=\"password\" validator={Valid.password(password)} />\n        <Field label=\"Vuelve a escribir la contraseña\" bind={[passwordMatch, setPasswordMatch]}\n        type=\"password\" validator={password===passwordMatch} />\n      </FlexDiv>\n      \n      <Image label=\"Foto de perfil\" note=\"(opcional)\" setter={setAvatar} img={avatar} />\n            \n      <Message type=\"error\" message={userError} />\n\n      <FlexDiv justify='space-between'>\n        <Link to=\"/ingresar\">Acceder</Link>\n\n        <Button type=\"submit\">Siguiente</Button>\n      </FlexDiv>\n\n    </Form>\n    :\n    active === \"trader\" ?\n\n    <Form title=\"Datos del comercio\" onSubmit={()=>{if (traderIsValid()) submit()}}>\n      {sending? null : <BiChevronLeft onClick={() => setActive(\"user\")} /> }\n\n      <Field label=\"Escribe tu razón social\" bind={[businessName, setBusinessName]}\n      validator={Valid.names(businessName)} />\n\n      <Radio legend=\"Selecciona una categoría:\" bind={[VATCategory, setVATCategory]}\n      options={[\"Responsable Inscripto\", \"Responsable Monotributista\"]} />\n\n      <Field label={\"C.U.I.T.\"}\n      bind={[CUIT, setCUIT]}\n      validator={Valid.CUIT(CUIT)} />\n\n      <Message type=\"error\" message={traderError} />\n\n      {success? <Message type=\"success\" message={`Se ha creado la cuenta \"${email}\"`}/>:\n      sending? <Loading /> : <Button type=\"submit\">Enviar</Button>}\n    </Form>\n    : null\n  );\n}","/**\n * Define métodos de validación de datos.\n * Cada método devuelve un boolean significando la validez del dato argumentado.\n * Opcionalmente llama a funciones pasando como argumento un mensaje de error.\n*/\nexport default class Valid {\n  public static names(name: string, setError?: Function): boolean {\n    if (name?.trim().length <= 20 && name.trim().length >= 3) return true;\n    if (setError) setError(\"El nombre debe ser de entre 3 y 20 caracteres\");\n    return false;\n  }\n\n  public static email(email: string, setError?: Function): boolean {\n    if (/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(email)) return true;\n    if (setError) setError(\"Ingrese una dirección válida de email\");\n    return false;\n  }\n\n  public static password(password: string, setError?: Function): boolean {\n    if (password?.length <= 40 && password.length >= 8) return true;\n    if (setError) setError(\"La contraseña debe ser de entre 8 y 40 caracteres\");\n    return false;\n  }\n\n  public static image(image: File, setError?: Function):boolean {\n    if (!image) return true;\n    if (image?.size < 2097152) return true;\n    if (setError) setError(\"La imágen no debe superar los 2MB\");\n    return false;\n  }\n\n  public static CUIT(CUIT: string, setError?: Function): boolean {\n    CUIT = CUIT?.replace(/ |\\.|-/g, \"\");\n    if (/^[0-9]{2}[1-9][0-9]{7}[0-9]$/.test(CUIT)) return true;\n    if (setError) setError(\"Ingrese una clave válida\");\n    return false;\n\n  }\n\n  public static sellConditions(conditions: string, setError?: Function): boolean {\n    if (\"Al contado Cuenta corriente Cheque Pagaré Otro\") return true;\n    if (setError) setError(\"Las condiciones de venta deben ser: Al contado, Cuenta corriente, Cheque, Pagaré u Otro\");\n    return false;\n\n  }\n\n  public static vatCategory(vatCategory: string, setError?: Function): boolean {\n    if ( vatCategory === \"Responsable Monotributista\" \n      || vatCategory === \"Responsable Inscripto\"\n      || vatCategory === \"Consumidor Final\"\n      || vatCategory === \"Sujeto Exento\"\n    ) return true;\n    if (setError) setError(\"Seleccione una categoría\");\n    return false;\n  }\n\n  public static address(address: string): boolean {\n    return address?.length <= 40 && address.length >= 4;\n  }\n\n  public static postalCode(postalCode: string, setError?: Function): boolean {\n    if  (/^\\d{4}$/.test(postalCode)) return true;\n    if (setError) setError(\"Ingrese un código postal de 4 dígitos\");\n    return false;\n  }\n\n  public static phone(phone: string, setError?: Function): boolean {\n    phone = phone?.replace(/ |\\.|-/g, \"\");\n    if (phone?.trim().length === 0) return true;\n    if (/^\\d{10}$/.test(phone)) return true;\n    if (setError) setError(\"Ingrese un número telefónico de 10 dígitos\");\n    return false;\n  }\n\n  public static website(url: string, setError?: Function): boolean {\n    if (url?.trim().length === 0) return true;\n    var regexp = /^(?:(?:https?|ftp):\\/\\/)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/\\S*)?$/;\n    if (regexp.test(url)) return true;\n    if (setError) setError(\"Ingrese un URL válido\");\n    return false;\n  }\n\n  public static addressNumber(addressNumber: number, setError?: Function): boolean {\n    if (/^[1-9]{1}\\d{0,4}$/.test(addressNumber?.toLocaleString())) return true;\n    if (setError) setError(\"Ingrese un número de dirección\");\n    return false;\n  }\n\n  public static addressHeight(addressHeight: string, setError?: Function): boolean {\n    if (/^[\\-]?\\d{1,3}$/.test(addressHeight)) return true;\n    if (setError) setError(\"Ingrese una altura válida\");\n    return false;\n  }\n\n  public static hexColor(hexColor: string, setError?: Function): boolean {\n    if (/^#[\\da-f]{6}$/.test(hexColor)) return true;\n    if (setError) setError(\"Ingrese un color válido.\");\n    return false;\n  }\n\n  public static date(date: string, setError?: Function): boolean {\n    if (/^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/.test(date)) return true;\n    if (setError) setError(\"Ingrese una fecha válida.\");\n    return false;\n  }\n}","//Métodos de conversión y formateo.\n\n/**Devuelve un string base 64 a partir de un valor tipo File. */\nexport const fileToBase64 = (file: Blob) => new Promise<string>((resolve, reject): void => {\n    const reader = new FileReader();\n    if (!file) return resolve(undefined);\n    reader.onerror = reject;\n    reader.onload = () => resolve(reader.result+'');\n    reader.readAsDataURL(file);\n});\n\n\n/**Devuelve un Blob a partir de un string en base 64.*/\nexport async function base64ToBlob(base64String:string): Promise<Blob> {\n    const base64Response = await window.fetch(base64String);\n    return await base64Response.blob();\n}\n\n\n/**Convierte un string de CUIT al formato AA-BB.BBB.BBB-A. */\nexport const toFormattedCUIT = (code:string) => {\n    const c = code.replace(/ |\\.|-/g, \"\");\n\n    return c? c.slice(0, 2) + '-' +\n    c.slice(2, 4) + '.' + c.slice(4, 7) + '.' + c.slice(7, 10) +\n    '-' + c.charAt(10) : '';\n}\n\nexport function toFourDigitNumber(number: number): string {\n    switch(number.toString().length) {\n        case 1: return \"000\"+number;\n        case 2: return \"00\"+number;\n        case 3: return \"0\"+number;\n        default: return number.toString().slice(0,number.toString().length-4); \n    }\n}"],"names":["accountToJson","account","JSON","user","username","trim","email","password","fileToBase64","avatar","businessName","trader","vatCategory","VATCategory","cuit","toFormattedCUIT","CUIT","stringify","url","method","postAccount","ajax","response","status","setSession","accessToken","parse","content","refreshToken","actives","passives","window","location","reload","SignUp","useState","active","setActive","sending","setSending","success","setSuccess","setUsername","setEmail","setPassword","setAvatar","passwordMatch","setPasswordMatch","userError","setUserError","setBusinessName","setVATCategory","setCUIT","traderError","setTraderError","ok","message","title","onSubmit","Valid","to","label","bind","validator","type","note","setter","img","justify","submit","onClick","legend","options","name","setError","length","test","image","size","replace","conditions","address","postalCode","phone","addressNumber","toLocaleString","addressHeight","hexColor","date","file","Promise","resolve","reject","reader","FileReader","undefined","onerror","onload","result","readAsDataURL","base64ToBlob","base64String","fetch","base64Response","blob","code","c","slice","charAt","toFourDigitNumber","number","toString"],"sourceRoot":""}