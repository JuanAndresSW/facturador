{"version":3,"file":"static/js/380.08d87bba.chunk.js","mappings":"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","sources":["components/layout/Retractable/Retractable.tsx","components/layout/Cond.tsx","pages/Account/services/getTraderData.ts","pages/Account/adapters/adaptTraderData.ts","pages/Account/adapters/adaptAccount.ts","pages/Account/services/updateAccounts.ts","pages/Account/Account.tsx","pages/Account/services/getLocalUserAvatar.ts","pages/Account/services/requestDeletionCode.ts","pages/Account/services/requestAccountDeletion.ts","utilities/conversions.ts"],"sourcesContent":["import React, { ReactNode, useState } from \"react\";\r\nimport { BiChevronDown, BiChevronUp } from \"react-icons/bi\";\r\nimport './Retractable.css'\r\n\r\n\r\ntype props = {\r\n    children: ReactNode;\r\n    label: string;\r\n    initial?: boolean;\r\n    sync?: boolean;\r\n    onClick?: Function;\r\n}\r\n\r\n\r\n/**\r\n * Un contenedor con título que puede ser contraído y extendido haciendo click sobre el encabezado.\r\n * @param props.label El título del contenedor.\r\n * @param props.initial? El valor boolean inicial. Pasar como false para que esté inicialmente retraído. Por defecto es true: extendido.\r\n * @param props.sync? Un valor boolean con el cual el elemento debe estar sincronizado. Si es undefined, es ignorado.\r\n * @param props.onClick? La función a ejecutar en el evento de click. Se pasa como argumento el valor boolean opuesto al valor actual del componente.\r\n */\r\nexport default function Retractable({ children, label, initial=true, sync, onClick }: props): JSX.Element {\r\n\r\n    const [localState, setLocalState] = useState(initial);\r\n    const extended = sync === undefined ? localState : sync;\r\n\r\n    function change() {\r\n        setLocalState(!extended);\r\n        if(onClick) onClick(!extended);\r\n    }\r\n\r\n    return (\r\n        <div className= { extended ? \"retractable\" : \"retractable folded\" }>\r\n\r\n            <div onClick={change}>\r\n                {label}\r\n                {extended?<BiChevronUp/>:<BiChevronDown/>}\r\n            </div>\r\n\r\n            <div>\r\n                {children}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { ReactNode } from \"react\";\r\n\r\n/**Un envoltorio que sólo muestra los contenidos cuando la condición 'bool' es cumplida. */\r\nconst Cond: React.FC<{ bool: boolean, children: ReactNode }> = ({ bool, children }) => {\r\n    return bool ? <>{children}</> : null\r\n}\r\nexport default Cond;","import getToken from \"../../../services/getToken\";\r\nimport ajax from 'interceptors/ajax';\r\nimport adaptTraderData from '../adapters/adaptTraderData';\r\n\r\nexport default function getTraderData(callback: Function): void {\r\n    ajax(\"GET\", `mainaccounts/${sessionStorage.getItem(\"username\")}`, { token: getToken(\"access\") }, respond);\r\n    function respond(state: number, data: string) {\r\n        if (state===200) callback(true, adaptTraderData(data));\r\n        else callback(false, data);\r\n    }\r\n}","import traderData from '../models/traderData';\r\n\r\nexport default function adaptSession(json: string): traderData {\r\n    const traderData = JSON.parse(json);\r\n    return {\r\n        businessName: traderData.businessName,\r\n        vatCategory: traderData.vatCategory,\r\n        uniqueKey: traderData.uniqueKey\r\n    }\r\n}","import { fileToBase64, toFormattedCode } from 'utilities/conversions';\r\nimport editedAccount from '../models/editedAccount';\r\n\r\nexport default async function adaptAccount(acc: editedAccount) {\r\n  \r\n    return JSON.stringify({\r\n        user: {\r\n            username:     acc.user.username,\r\n            newUsername:  acc.user.newUsername?     acc.user.newUsername.trim()       : null,\r\n            password:     acc.user.password?        acc.user.password.trim()          : null,\r\n            newPassword:  acc.user.newPassword?     acc.user.newPassword.trim()       : null,\r\n            newAvatar:    await  fileToBase64(acc.user.newAvatar)\r\n        },\r\n        trader: {\r\n            newBusinessName: acc.trader.newBusinessName? acc.trader.newBusinessName.trim()   : null,\r\n            newVatCategory:  acc.trader.newVatCategory?  acc.trader.newVatCategory.trim()    : null,\r\n            newCode:         acc.trader.newCode?         toFormattedCode(acc.trader.newCode) : null,\r\n        }\r\n    });\r\n}","import ajax from 'interceptors/ajax';\r\nimport editedAccount from '../models/editedAccount';\r\nimport adaptAccount from '../adapters/adaptAccount';\r\nimport getToken from 'services/getToken';\r\n\r\nexport async function updateMainAccount(account: editedAccount, callback:Function): Promise<void> {\r\n    ajax(\"PUT\", \"mainaccounts\", \r\n    { body: await adaptAccount(account), token: getToken(\"access\") }, \r\n    (state: number, data: string)=>respond(state, data, callback));\r\n}\r\n\r\nexport async function updateBranchAccount(account: editedAccount, callback:Function) {\r\n    ajax(\"PUT\", \"auth/branchaccounts\", \r\n    { body: await adaptAccount(account), token: getToken(\"access\") }, \r\n    (state: number, data: string)=>respond(state, data, callback));\r\n}\r\n\r\nfunction respond(state: number, data: string, callback: Function): void {\r\n    if (state === 200) {\r\n        localStorage.removeItem('avatar');\r\n        callback(true);\r\n    }\r\n    else callback(false, data);\r\n}","//React.\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n//Servicios.\r\nimport getLocalUserAvatar from './services/getLocalUserAvatar';\r\nimport getTraderData from './services/getTraderData';\r\nimport { updateMainAccount, updateBranchAccount } from './services/updateAccounts';\r\nimport requestDeletionCode from './services/requestDeletionCode';\r\nimport requestAccountDeletion from './services/requestAccountDeletion';\r\n//Validación.\r\nimport Valid from \"utilities/Valid\";\r\n//GUI.\r\nimport { Button, Message, Field, Form, Image, Radio } from \"components/formComponents\";\r\nimport { Retractable } from \"components/layout\";\r\nimport { Loading, Section } from \"styledComponents\";\r\nimport { BiChevronLeft } from \"react-icons/bi\";\r\n//Modelos.\r\nimport editedAccount from \"./models/editedAccount\";\r\n\r\n\r\n//## Funciones de implementación condicional. ##//\r\nconst hasRootAccess = sessionStorage.getItem(\"role\") === \"MAIN\";\r\n\r\nconst updateAccount = hasRootAccess?\r\n(data:any, handler:Function)=> updateMainAccount(data, handler):\r\n(data:any, handler:Function)=> updateBranchAccount(data, handler);\r\n\r\n\r\n/**Un formulario que permite cambiar datos de la cuenta / eliminar la cuenta de usuario y el comerciante. */\r\nexport default function Account(): JSX.Element {\r\n\r\n    /*DATOS***************************************************************/\r\n\r\n    const navigate =                useNavigate(); \r\n    const [loading, setLoading] =   useState(false);\r\n    const [success, setSuccess] =   useState(false);\r\n    const [deleteSuccess, setDeleteSuccess] =   useState(false); \r\n    \r\n\r\n    //Errores.\r\n    const [error, setError] =                       useState(\"\");\r\n    const [deleteError, setDeleteError] =           useState(\"\");\r\n    //Datos de eliminación.\r\n    const [deletePermissionGranted, setDeletePermissionGranted] = useState(false);\r\n    const [deletionCode, setDeletionCode] =                       useState(\"\");\r\n    //Datos del usuario.\r\n    const [avatar, setAvatar] =                     useState(undefined);\r\n    const [newUsername, setNewUsername] =                 useState('');\r\n    const [password, setPassword] =                 useState(\"\");\r\n    const [newPassword, setNewPassword] =           useState(\"\");\r\n    const [confirmPassword, setConfirmPassword] =   useState(\"\");\r\n    //Datos del comerciante.\r\n    const [businessName, setBusinessName] =         useState(\"\");\r\n    const [newBusinessName, setNewBusinessName] =   useState(\"\");\r\n    const [vatCategory, setVatCategory] =           useState(\"\");\r\n    const [newVatCategory, setNewVatCategory] =     useState(\"\");\r\n    const [code, setCode] =                         useState(\"\");\r\n    const [newCode, setNewCode] =                   useState(\"\");\r\n\r\n    //Pedir los datos actuales en el primer renderizado.\r\n    useEffect(() => {\r\n        getLocalUserAvatar((ok:boolean, file: Blob) => {\r\n            if (ok && !avatar) setAvatar(file);\r\n        });\r\n\r\n        if (hasRootAccess) {\r\n            getTraderData((ok:boolean, data:any):void => {\r\n                if (!ok) { setError(data); return; }\r\n                setBusinessName (data.businessName);\r\n                setVatCategory  (data.vatCategory);\r\n                setCode         (data.uniqueKey);\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    /*VALIDACIÓN***************************************************************/\r\n\r\n    function filter():void {\r\n        if (!Valid.image(avatar, setError)) return;\r\n        if (newUsername && !Valid.names(newUsername, setError)) return;\r\n        if (Valid.password(password)) {\r\n            if (!Valid.password(newPassword, setError)) return;\r\n            if (newPassword!==confirmPassword) return setError(\"Las contraseñas no coinciden\");\r\n        }\r\n        if (hasRootAccess)                                            {\r\n            if (newBusinessName && !Valid.names(newBusinessName)) return setError(\"La razón social debe ser de entre 3 y 20 caracteres\");\r\n            if (newVatCategory && !Valid.vatCategory(newVatCategory)) return setError(\"Seleccione una categoría\");\r\n            if (newCode && !Valid.code(code)) return setError(`C.U.I.${newVatCategory === \"Monotributista\"? \"L. inválido\": \"T. inválida\"}`);\r\n        }\r\n        submit();\r\n    }\r\n\r\n    /*COMUNICACIÓN***************************************************************/\r\n\r\n    //Envía los datos al servidor.\r\n    async function submit() {\r\n        setLoading(true);\r\n        const account: editedAccount = {\r\n            user: {\r\n                username:     sessionStorage.getItem(\"username\"),\r\n                newUsername:  newUsername,\r\n                password:     password,\r\n                newPassword:  newPassword,\r\n                newAvatar:    avatar,\r\n            },\r\n            trader: {\r\n                newBusinessName: newBusinessName,\r\n                newVatCategory:  newVatCategory,\r\n                newCode:         newCode,\r\n            }\r\n        } \r\n        updateAccount(account, (ok:boolean, data:string)=>{\r\n            setLoading(false);\r\n            if (ok) {\r\n                setSuccess(true);\r\n                if (newUsername) sessionStorage.setItem(\"username\", newUsername);\r\n            }\r\n            else setError(data);\r\n        });\r\n    }\r\n\r\n    //Solicita un código de eliminación a ser enviado al email del usuario.\r\n    function RequestDeletePermission() {\r\n        setLoading(true);\r\n        requestDeletionCode((ok:boolean, data:string)=> {\r\n            setLoading(false);\r\n            if (ok) setDeletePermissionGranted(true);\r\n            else setDeleteError(data);\r\n        });\r\n    }\r\n\r\n    //Envía el código de eliminación ingresado. Si es correcto, la cuenta de usuario es eliminada.\r\n    function deleteAccount() {\r\n        //if (deletionCode?.length !== 5) {setDeleteError(\"Código inválido\"); return;} TODO: remove uncomment\r\n        requestAccountDeletion(deletionCode, (ok:boolean, data:string)=> {\r\n            if (!ok) setDeleteError(data);\r\n            else setDeleteSuccess(true);\r\n        });\r\n    }\r\n\r\n\r\n    /*FORMULARIO***************************************************************/\r\n\r\n    return (\r\n        <>\r\n   \r\n        <Form title=\"Opciones de la cuenta\" onSubmit={filter}>\r\n            <BiChevronLeft onClick={() => navigate(\"/inicio\")} style={{margin:\"1rem\", fontSize:\"2rem\", color:\"rgb(44,44,44)\",cursor:\"pointer\"}} />\r\n                \r\n            <Image label='' setter={setAvatar} img={avatar} />\r\n\r\n            <Field bind={[newUsername, setNewUsername]} label=\"Nombre\"\r\n            placeholder={sessionStorage.getItem('username')} />\r\n\r\n            <Field bind={[password, setPassword]} label=\"Para cambiar tu contraseña, introduce la contraseña actual:\" type=\"password\" />\r\n            {!Valid.password(password) ? null:\r\n            <>\r\n            <Field bind={[newPassword, setNewPassword]} label=\"Nueva contraseña\" type=\"password\" />\r\n            <Field bind={[confirmPassword, setConfirmPassword]} label=\"Confirmar nueva contraseña\" type=\"password\" />\r\n            </>}\r\n\r\n            {!hasRootAccess?null:\r\n                <Section label=\"Datos del comercio\">\r\n                    <Field bind={[newBusinessName, setNewBusinessName]} label=\"Razón social\"\r\n                    placeholder={businessName} />\r\n                        \r\n                    <Radio legend={\"Actualmente: \"+vatCategory+\". Nueva categoría:\"} bind={[newVatCategory, setNewVatCategory]}\r\n                    options={[\"Responsable Inscripto\", \"Monotributista\", \"Sujeto Exento\"]} />\r\n\r\n                    <Field label={\"C.U.I.\" + (newVatCategory === \"Monotributista\" ? \"L. \" : \"T. \")}\r\n                    bind={[newCode, setNewCode]} placeholder={code} />\r\n                </Section>\r\n            }\r\n\r\n            <Message type=\"error\" message={error} />\r\n\r\n            {success? <Message type=\"success\" message=\"Se han guardado los cambios\"/>:\r\n            loading?<Loading />:\r\n            <Button text=\"Confirmar cambios\" type=\"submit\" />}\r\n            \r\n\r\n            <p style={{textAlign:\"center\", color:\"#fff\", cursor:\"default\"}}>...</p>\r\n            <Retractable label=\"Otras opciones\" initial={false}>\r\n                \r\n                {!deletePermissionGranted? null :\r\n                    <Field bind={[deletionCode, setDeletionCode]} \r\n                    label={'Se ha enviado por correo electrónico el código de eliminación. Escríbelo a continuación para confirmar:'} />\r\n                }   \r\n\r\n                <Message type=\"error\" message={deleteError} />\r\n\r\n                {deleteSuccess? <Message type=\"success\" message={`Se ha eliminado la cuenta`}/>:\r\n                    loading? <Loading /> :\r\n                    <Button type=\"delete\"\r\n                text=   {!deletePermissionGranted?\"Borrar la cuenta\" : \"Solicitar código para eliminar cuenta\"}\r\n                onClick={!deletePermissionGranted?deleteAccount      :  RequestDeletePermission} />}  {/*TODO: remove !: delete only after permission */}\r\n\r\n            </Retractable>\r\n        </Form>\r\n        </>\r\n    )\r\n}","import { base64ToBlob } from 'utilities/conversions';\r\n\r\nexport default function getLocalUserAvatar(callback: Function): void {\r\n\r\n    if (localStorage.getItem(\"avatar\")) returnAsFile();\r\n    else callback(false);\r\n\r\n    async function returnAsFile():Promise<void> {\r\n        const blob = await base64ToBlob(localStorage.getItem('avatar').slice(22)); //\"data:image/png;base64,\".length === 22\r\n        callback(true, blob);\r\n    }\r\n}\r\n","import ajax from 'interceptors/ajax';\r\nimport getToken from '../../../services/getToken';\r\n\r\n/**Solicita que un código de eliminación de cuenta sea enviado por email al propietario de la cuenta.*/\r\nexport default function requestDeletionCode(callback:Function): void {\r\n    ajax(\"HEAD\", \"mainaccounts\", { token: getToken(\"access\") }, respond);\r\n\r\n    function respond(state:number, data:string) {\r\n        if (state === 200) callback(true)\r\n        else callback(false, data);\r\n    }\r\n}","import ajax from 'interceptors/ajax';\r\nimport getToken from '../../../services/getToken';\r\nimport closeSession from 'services/closeSession';\r\n\r\n/**Solicita que un código de eliminación de cuenta sea enviado por email al propietario de la cuenta.*/\r\nexport default function requestAccountDeletion(code:string, callback:Function): void {\r\n    ajax(\"DELETE\", `mainaccounts/${sessionStorage.getItem(\"username\")}`, { token: getToken('access') }, respond);\r\n    //TODO: add {body: code}\r\n    function respond(state:number, data:string) {\r\n        if (state === 200) {\r\n            localStorage.clear();\r\n            sessionStorage.clear();\r\n            callback(true);\r\n        }\r\n        else callback(false, data);\r\n    }\r\n}","//Métodos de conversión y formateo.\r\n\r\n/**Devuelve un string base 64 a partir de un valor tipo File. */\r\nexport const fileToBase64 = (file: File) => new Promise((resolve, reject): void => {\r\n    const reader = new FileReader();\r\n    if (!file) {resolve(undefined);return};\r\n    reader.onerror = reject;\r\n    reader.onload = () => resolve(reader.result);\r\n    reader.readAsDataURL(file);\r\n});\r\n\r\n/**Devuelve un Blob a partir de un string en base 64. */\r\nexport const base64ToBlob = async (base64String:string) => {\r\n    const base64Response = await window.fetch(`data:image/jpeg;base64,${base64String}`);\r\n    return await base64Response.blob();\r\n}\r\n\r\n/**Convierte un string de CUIT/CUIL al formato AA-BB.BBB.BBB-A. */\r\nexport const toFormattedCode = (code:string) => {\r\n    const c = code.replace(/ |\\.|-/g, \"\");\r\n\r\n    return c? c.slice(0, 2) + '-' +\r\n    c.slice(2, 4) + '.' + c.slice(4, 7) + '.' + c.slice(7, 10) +\r\n    '-' + c.charAt(10) : '';\r\n}"],"names":["Retractable","children","label","initial","sync","onClick","useState","localState","setLocalState","extended","undefined","className","bool","getTraderData","callback","ajax","sessionStorage","getItem","token","getToken","state","data","json","traderData","JSON","parse","businessName","vatCategory","uniqueKey","adaptTraderData","adaptAccount","acc","user","username","newUsername","trim","password","newPassword","fileToBase64","newAvatar","newBusinessName","trader","newVatCategory","newCode","toFormattedCode","stringify","account","body","respond","localStorage","removeItem","hasRootAccess","updateAccount","handler","updateMainAccount","updateBranchAccount","Account","navigate","useNavigate","loading","setLoading","success","setSuccess","deleteSuccess","setDeleteSuccess","error","setError","deleteError","setDeleteError","deletePermissionGranted","setDeletePermissionGranted","deletionCode","setDeletionCode","avatar","setAvatar","setNewUsername","setPassword","setNewPassword","confirmPassword","setConfirmPassword","setBusinessName","setNewBusinessName","setVatCategory","setNewVatCategory","code","setCode","setNewCode","ok","setItem","useEffect","base64ToBlob","slice","blob","returnAsFile","getLocalUserAvatar","file","title","onSubmit","Valid","submit","style","margin","fontSize","color","cursor","setter","img","bind","placeholder","type","legend","options","message","text","textAlign","clear","Promise","resolve","reject","reader","FileReader","onerror","onload","result","readAsDataURL","base64String","window","fetch","base64Response","c","replace","charAt"],"sourceRoot":""}